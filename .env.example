# ===============================
# Workshop Builder — .env.template
# ===============================
# Copy to ".env" and fill in the secrets you use. Do NOT commit real keys.

# -----------------------------------------------------------------------------
# Flask UI
# -----------------------------------------------------------------------------
FLASK_HOST=0.0.0.0
FLASK_PORT=5000
FLASK_DEBUG=false

# -----------------------------------------------------------------------------
# Universal A2A server (the Flask UI will call this)
# -----------------------------------------------------------------------------
A2A_HOST=0.0.0.0
A2A_PORT=8000
PUBLIC_URL=http://localhost:8000
A2A_BASE=http://localhost:8000
A2A_RELOAD=0

# -----------------------------------------------------------------------------
# LLM provider for agents/examples
# Set one of: watsonx | openai
# -----------------------------------------------------------------------------
LLM_PROVIDER=watsonx
MODEL_ID=ibm/granite-3-8b-instruct
# LLM_PROVIDER=openai
# MODEL_ID=gpt-4o-mini

# -----------------------------------------------------------------------------
# watsonx.ai credentials (required if LLM_PROVIDER=watsonx or embeddings=watsonx)
# -----------------------------------------------------------------------------
WATSONX_API_KEY=REPLACE_ME
WATSONX_URL=https://us-south.ml.cloud.ibm.com
WATSONX_PROJECT_ID=REPLACE_ME

# -----------------------------------------------------------------------------
# OpenAI (optional alternative for chat or embeddings)
# -----------------------------------------------------------------------------
# OPENAI_API_KEY=sk-REPLACE_ME
# OPENAI_BASE=

# -----------------------------------------------------------------------------
# Compatibility aliases (some SDKs/libraries look for these)
# -----------------------------------------------------------------------------
IBM_CLOUD_API_KEY=${WATSONX_API_KEY}
IBM_CLOUD_URL=${WATSONX_URL}
IBM_CLOUD_PROJECT_ID=${WATSONX_PROJECT_ID}
PROJECT_ID=${WATSONX_PROJECT_ID}

# -----------------------------------------------------------------------------
# /knowledge (RAG) — opt-in endpoints for large Markdown/repos
# -----------------------------------------------------------------------------
A2A_ENABLE_KNOWLEDGE=1
A2A_KNOWLEDGE_DIR=.a2a_knowledge

# Chunking & filters
A2A_CHUNK_SIZE=1400
A2A_CHUNK_OVERLAP=160
A2A_INCLUDE_EXT=.md,.mdx,.py,.ipynb,.txt
A2A_EXCLUDE_EXT=.png,.jpg,.jpeg,.gif,.pdf

# Vector DB (Chroma local by default; switch to Qdrant for scale/HA)
A2A_VDB=chromadb
A2A_CHROMA_COLLECTION=a2a-knowledge
# A2A_VDB=qdrant
# A2A_QDRANT_URL=http://localhost:6333
# A2A_QDRANT_COLLECTION=a2a-knowledge

# -----------------------------------------------------------------------------
# Embeddings for RAG (/knowledge)
# Choose one provider: openai | watsonx
# -----------------------------------------------------------------------------
A2A_EMBEDDINGS_PROVIDER=watsonx
A2A_EMBEDDINGS_MODEL=ibm/slate-125m-english-rtrvr
# If using OpenAI embeddings:
# A2A_EMBEDDINGS_PROVIDER=openai
# A2A_EMBEDDINGS_MODEL=text-embedding-3-small

# Fallback & guardrails (crew_rag.py v1.3.0)
A2A_RAG_FALLBACK_LC=1         # enable Watsonx+Chroma fallback when native path yields no results
A2A_STRICT_INGEST_ROOT=0      # set 1 to refuse ingest outside A2A_KNOWLEDGE_DIR
A2A_MAX_EMBED_TOKENS=512      # model token cap (approx)
A2A_CHARS_PER_TOKEN=2.0       # rough chars/token for code/md
A2A_MIN_CHUNK_CHARS=256       # minimum chunk size when auto-shrinking

# Watsonx embeddings aliases (used by fallback path)
EMBEDDINGS_PROVIDER=${A2A_EMBEDDINGS_PROVIDER}
EMBEDDINGS_MODEL_ID=${A2A_EMBEDDINGS_MODEL}
EMBEDDINGS_WATSONX_MODEL_ID=${A2A_EMBEDDINGS_MODEL}
EMBEDDINGS_WATSONX_URL=${WATSONX_URL}
EMBEDDINGS_WATSONX_API_KEY=${WATSONX_API_KEY}
EMBEDDINGS_WATSONX_PROJECT_ID=${WATSONX_PROJECT_ID}

# -----------------------------------------------------------------------------
# CrewAI (optional)
# -----------------------------------------------------------------------------
USE_CREWAI=0
CREWAI_STORAGE_DIR=.crewai_storage

# -----------------------------------------------------------------------------
# CORS / Hosts (A2A server)
# -----------------------------------------------------------------------------
ALLOWED_HOSTS=*
CORS_ALLOW_ORIGINS=*
CORS_ALLOW_METHODS=*
CORS_ALLOW_HEADERS=*
CORS_ALLOW_CREDENTIALS=false
